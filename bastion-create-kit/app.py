from flask import Flask, render_template, request, flash, redirect, url_for
import subprocess
import os

app = Flask(__name__)
# flash 메시지 기능을 사용하기 위한 시크릿 키
app.config['SECRET_KEY'] = 'a-very-secret-key-that-should-be-changed'

# Kickstart 템플릿
KS_TEMPLATE = """
# Kickstart file for RHEL 9.6 Bastion VM - Generated by WebUI
lang en_US.UTF-8
keyboard --xlayouts='us'
timezone Asia/Seoul --utc
rootpw --plaintext ##ROOT_PASSWORD##

# --- 핵심 파티션 설정 ---
# 1. 디스크의 모든 파티션을 깨끗하게 지웁니다.
clearpart --all --initlabel

# 2. 자동으로 파티션을 설정합니다.
#    - /boot 파티션과 swap 파티션은 자동으로 생성됩니다.
#    - --nohome 옵션으로 /home 파티션을 만들지 않고,
#      남은 모든 공간을 루트(/) 파티션에 할당합니다.
autopart --nohome


# BaseOS와 AppStream 리포지토리를 명시적으로 지정
url --url="http://##HTTP_SERVER_IP##:8080/rhel9.6/BaseOS"
repo --name="AppStream" --baseurl="http://##HTTP_SERVER_IP##:8080/rhel9.6/AppStream"

network --bootproto=static --device=enp1s0 --ip=192.168.122.100 --netmask=255.255.255.0 --gateway=192.168.0.1 --nameserver=8.8.8.8,8.8.4.4 --hostname=##HOSTNAME## --activate
services --enabled="chronyd,httpd,named"
firewall --enabled --service=ssh,http,https
bootloader --location=mbr --boot-drive=vda
zerombr
clearpart --all --initlabel
autopart --type=lvm
graphical

%packages
@^graphical-server-environment
haproxy
bind
bind-utils
chrony
httpd
httpd-tools
python3
python3-pip
ansible-core
nmstate
wget
podman
skopeo
jq
tar
gcc
python3-devel
rsync
policycoreutils-python-utils
%end



%post --log=/root/ks-post.log
pip3 install Flask Flask-WTF


# Add user with specified password
useradd user
echo 'user:Redhat123!@#' | chpasswd



# 네트워크 인터페이스 이름 확인 (예: ens3 또는 enp1s0 등)
IFACE=$(nmcli device status | grep ethernet | awk '{print $1}' | head -n1)

echo "설정할 인터페이스: $IFACE"

# 기존 connection 이름 확인 (보통은 interface 이름과 동일함)
CONNAME=$(nmcli -t -f NAME,DEVICE connection show | grep "$IFACE" | cut -d: -f1)

echo "기존 연결 이름: $CONNAME"

# 기존 설정 삭제 및 새 설정 생성
#nmcli connection modify "$CONNAME" ipv4.method manual ipv4.addresses 192.168.122.100/24 ipv4.gateway 192.168.122.1
#nmcli connection down "$CONNAME"
#nmcli connection up "$CONNAME"

%end

reboot
"""

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        action = request.form.get('action')
        try:
            if action == 'generate_kickstart':
                ks_content = KS_TEMPLATE.replace("##ROOT_PASSWORD##", request.form.get('root_password')) \
                                        .replace("##HTTP_SERVER_IP##", request.form.get('http_server_ip')) \
                                        #.replace("##IP_ADDRESS##", request.form.get('ip_address')) \
                                        #.replace("##SUBNET##", request.form.get('subnet')) \
                                        .replace("##HOSTNAME##", request.form.get('hostname'))

                ks_path = "/var/www/html/kickstart/ks.cfg"
                with open(ks_path, "w") as f:
                    f.write(ks_content)
                
                subprocess.run(['sudo', 'restorecon', '-v', ks_path], check=True)
                flash(f"✅ Kickstart 파일이 {ks_path} 에 성공적으로 생성되었습니다.", 'success')

            elif action == 'download_iso':
                # 사용자가 입력한 URL을 가져옵니다
                iso_url = request.form.get('iso_url_from_user')
                if not iso_url or not iso_url.startswith('http'):
                    flash("❌ 오류: 유효한 다운로드 URL을 입력해야 합니다.", 'danger')
                    return redirect(url_for('index'))

                # 다운로드될 파일 이름 지정 (URL이 복잡하므로 고정된 이름 사용)
                iso_filename = "rhel-9.6-x86_64-dvd.iso"
                download_path = f"/tmp/{iso_filename}"
                mount_path = "/var/www/html/rhel9.6"

                flash(f"ISO 다운로드를 시작합니다... (대상: {mount_path})", 'info')
                
                # wget과 mount 실행
                subprocess.run(['sudo', 'wget', '-O', download_path, iso_url], check=True)
                subprocess.run(['sudo', 'mount', '-o', 'loop', download_path, mount_path], check=True)
                
                flash(f"✅ ISO 이미지를 성공적으로 다운로드하고 {mount_path} 에 마운트했습니다.", 'success')
            
            elif action == 'create_vm':
                http_server_ip = request.form.get('http_server_ip')
                
                location_url = f"http://{http_server_ip}:8080/rhel9.6"
                ks_location = f"http://{http_server_ip}:8080/kickstart/ks.cfg"

                virt_install_cmd = [
                    'sudo', 'virt-install',
                    '--name', 'rhel96-bastion',
                    '--ram', '16384',
                    '--vcpus', '8',
                    '--disk', 'path=/rhel96-bastion.qcow2,size=50',
                    '--os-variant', 'rhel9.4',
                    '--network', 'bridge=virbr0',
                    '--graphics', 'vnc,listen=0.0.0.0',
                    '--location', location_url,
                    f'--extra-args=inst.ks={ks_location}',
                    '--noautoconsole'
                ]
                
                result = subprocess.run(virt_install_cmd, capture_output=True, text=True, check=True)
                flash("🚀 VM 생성 명령을 실행했습니다. `virt-manager` 또는 `virsh list`로 상태를 확인하세요.", 'success')

        except subprocess.CalledProcessError as e:
            flash(f"❌ 명령어 실행 오류: {e.stderr}", 'danger')
        except Exception as e:
            flash(f"❌ 일반 오류 발생: {e}", 'danger')

        return redirect(url_for('index'))

    return render_template('index.html')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5011, debug=True)
